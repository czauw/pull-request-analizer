# ===================================================================================
#  AI代码审查助理团队 (AI Code Review Assistant Crew) 的 Task 配置文件
# ===================================================================================

# -----------------------------------------------------------------------------------
#  Task 1: 分析代码逻辑 (analyze_logic)
#  目标: 由`logic_reviewer`执行，对代码进行深度逻辑和质量分析。
# -----------------------------------------------------------------------------------
analyze_logic:
  description: >
    1.  仔细阅读并分析以下提供的代码变更。
    2.  根据你的角色定位（逻辑与质量专家），从代码逻辑、可读性、设计模式、潜在性能问题和文档规范等角度，提出具体的、有建设性的审查意见。
    3.  你的分析必须深入代码细节。
    4.  将你的所有发现，以分点列表的形式清晰地组织起来。
    5.  你只负责逻辑和质量审查，不涉及代码风格，安全问题的审查。
    6.  在给建议的时候不需要写明代码块，只需要提供解释和建议。


    需要审查的代码如下:
    --- START OF CODE ---
    {code}
    --- END OF CODE ---
  expected_output: >
    一份详细的、分条列举的审查意见清单。
    清单中的每一项都应清晰地指出问题所在、提供解释和建议。建议里面不需要包含代码块。
    例如:
    - **[性能问题]** 在`process_data`函数的循环内部进行了数据库查询，建议将查询操作移到循环外部。
    - **[可读性]** 变量`temp_var`的命名不够清晰，建议修改为`user_profile`以明确其用途。
  agent: logic_reviewer

# -----------------------------------------------------------------------------------
#  Task 2: 分析代码安全 (analyze_security)
#  目标: 由`security_auditor`执行，从纯粹的安全视角审计代码。
# -----------------------------------------------------------------------------------
analyze_security:
  description: >
    1.  以安全审计专家的视角，严格审查以下提供的代码变更。
    2.  你的审查**只关注**安全方面，找出所有潜在的安全漏洞和风险，例如注入风险、硬编码凭证、XSS等。
    3.  对于每一个发现的安全问题，明确指出其风险和潜在影响。
    4.  将你的所有发现，以分点列表的形式清晰地组织起来。
    5.  在给建议的时候不需要写明代码块，只需要提供解释和建议。


    需要审查的代码如下:
    --- START OF CODE ---
    {code}
    --- END OF CODE ---
  expected_output: >
    一份仅包含安全问题的、分条列举的审查意见清单。
    清单中的每一项都应明确指出漏洞类型和存在问题的代码行。
    例如:
    - **[硬编码密钥]** 在`config.py`的第15行发现硬编码的API密钥，应立即将其从代码中移除，并使用环境变量或密钥管理服务代替。
    - **[SQL注入风险]** 在`user_service.py`的`get_user`函数中，SQL查询语句直接拼接了用户输入，存在SQL注入的高风险。
  agent: security_auditor

# -----------------------------------------------------------------------------------
#  Task 3: 合成最终审查报告 (synthesize_report)
#  目标: 由`report_synthesizer`执行，整合所有意见，形成最终报告。
#  注意: 这个任务会自动接收前两个任务的输出作为上下文。
# -----------------------------------------------------------------------------------
synthesize_report:
  description: >
    1.  接收并仔细阅读来自`logic_reviewer`和`security_auditor`的两份独立的审查意见清单。
    2.  将这些意见整合、分类并去重，形成一份统一、完整、专业的代码审查报告。
    3.  报告必须使用Markdown格式，结构清晰，开头应有总结，然后分“关键问题”和“改进建议”等板块。
    4.  报告的口吻必须是专业、尊重且富有建设性的，旨在帮助开发者，而不是指责。
  expected_output: >
    一份可以直接发布到GitHub PR评论区的、格式优美的完整Markdown审查报告。
    报告应包含以下结构：
    - ## 总体评价 (一个简短的、积极的开场白)
    - ## ❗ 关键问题 (必须修复的安全漏洞或严重Bug)
    - ## ✨ 改进建议 (关于代码质量、性能和可读性的建议)
    - ## 总结 (一个鼓励性的结尾)
  agent: report_synthesizer
  context:
    - analyze_logic
    - analyze_security

    # -----------------------------------------------------------------------------------
#  Task 4: 终审并净化最终报告 (finalize_report)
#  目标: 由`report_reviewer`执行，对合成的报告进行最终的格式净化。
#  注意: 这个任务会自动接收`synthesize_report`任务的输出作为上下文。
# -----------------------------------------------------------------------------------
finalize_report:
  description: >
    1.  接收由`report_synthesizer`生成的完整审查报告。
    2.  根据你的角色定位（Markdown 格式终审员），严格检查报告的每一部分。
    3.  你的唯一任务是：修正所有Markdown格式错误、移除任何可能存在的重复条目，并删除报告主体前后任何多余的文字（例如 "这是最终报告：" 或 "希望这些建议对你有帮助" 等）。
    4.  绝对禁止修改报告中任何实质性的审查意见、逻辑或措辞。
    5.  你必须像一个精确的过滤器一样工作，只留下纯净的、格式完美的报告本身。
  expected_output: >
    一份纯净的、可以直接发布的最终Markdown报告文本。
    这份文本不应包含任何包装性或解释性的语句。
    它应该直接以 "## 总体评价" 开头，并以最后的总结结尾，除此之外没有任何多余字符。
  agent: report_reviewer
  context:
    - synthesize_report
